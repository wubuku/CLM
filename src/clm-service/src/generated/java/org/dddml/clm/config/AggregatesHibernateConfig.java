// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.config;

import org.dddml.clm.domain.tag.*;
import org.dddml.clm.domain.*;
import org.dddml.clm.domain.tag.hibernate.*;
import org.dddml.clm.domain.tagpair.*;
import org.dddml.clm.domain.*;
import org.dddml.clm.domain.tagpair.hibernate.*;
import org.dddml.clm.domain.cabinet.*;
import org.dddml.clm.domain.*;
import org.dddml.clm.domain.cabinet.hibernate.*;
import org.dddml.clm.domain.device.*;
import org.dddml.clm.domain.*;
import org.dddml.clm.domain.device.hibernate.*;
import org.dddml.clm.domain.tagdeviceassociation.*;
import org.dddml.clm.domain.*;
import org.dddml.clm.domain.tagdeviceassociation.hibernate.*;
import org.dddml.clm.specialization.AggregateEventListener;
import org.dddml.clm.specialization.EventStore;
import org.dddml.clm.specialization.IdGenerator;
import org.dddml.clm.specialization.ReadOnlyProxyGenerator;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AggregatesHibernateConfig {


    @Bean
    public TagStateRepository tagStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagStateRepository repository = new HibernateTagStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public TagStateQueryRepository tagStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagStateQueryRepository repository = new HibernateTagStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateTagEventStore tagEventStore(SessionFactory hibernateSessionFactory) {
        HibernateTagEventStore eventStore = new HibernateTagEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractTagApplicationService.SimpleTagApplicationService tagApplicationService(
            @Qualifier("tagEventStore") EventStore tagEventStore,
            TagStateRepository tagStateRepository,
            TagStateQueryRepository tagStateQueryRepository
            , IdGenerator<String, TagCommand.CreateTag, TagState> tagIdGenerator
    ) {
        AbstractTagApplicationService.SimpleTagApplicationService applicationService = new AbstractTagApplicationService.SimpleTagApplicationService(
                tagEventStore,
                tagStateRepository,
                tagStateQueryRepository
                , tagIdGenerator
        );
        return applicationService;
    }



    @Bean
    public TagPairStateRepository tagPairStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagPairStateRepository repository = new HibernateTagPairStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public TagPairStateQueryRepository tagPairStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagPairStateQueryRepository repository = new HibernateTagPairStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateTagPairEventStore tagPairEventStore(SessionFactory hibernateSessionFactory) {
        HibernateTagPairEventStore eventStore = new HibernateTagPairEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractTagPairApplicationService.SimpleTagPairApplicationService tagPairApplicationService(
            @Qualifier("tagPairEventStore") EventStore tagPairEventStore,
            TagPairStateRepository tagPairStateRepository,
            TagPairStateQueryRepository tagPairStateQueryRepository
    ) {
        AbstractTagPairApplicationService.SimpleTagPairApplicationService applicationService = new AbstractTagPairApplicationService.SimpleTagPairApplicationService(
                tagPairEventStore,
                tagPairStateRepository,
                tagPairStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public CabinetStateRepository cabinetStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateCabinetStateRepository repository = new HibernateCabinetStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public CabinetStateQueryRepository cabinetStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateCabinetStateQueryRepository repository = new HibernateCabinetStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateCabinetEventStore cabinetEventStore(SessionFactory hibernateSessionFactory) {
        HibernateCabinetEventStore eventStore = new HibernateCabinetEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractCabinetApplicationService.SimpleCabinetApplicationService cabinetApplicationService(
            @Qualifier("cabinetEventStore") EventStore cabinetEventStore,
            CabinetStateRepository cabinetStateRepository,
            CabinetStateQueryRepository cabinetStateQueryRepository
    ) {
        AbstractCabinetApplicationService.SimpleCabinetApplicationService applicationService = new AbstractCabinetApplicationService.SimpleCabinetApplicationService(
                cabinetEventStore,
                cabinetStateRepository,
                cabinetStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public DeviceStateRepository deviceStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateDeviceStateRepository repository = new HibernateDeviceStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public DeviceStateQueryRepository deviceStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateDeviceStateQueryRepository repository = new HibernateDeviceStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateDeviceEventStore deviceEventStore(SessionFactory hibernateSessionFactory) {
        HibernateDeviceEventStore eventStore = new HibernateDeviceEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractDeviceApplicationService.SimpleDeviceApplicationService deviceApplicationService(
            @Qualifier("deviceEventStore") EventStore deviceEventStore,
            DeviceStateRepository deviceStateRepository,
            DeviceStateQueryRepository deviceStateQueryRepository
    ) {
        AbstractDeviceApplicationService.SimpleDeviceApplicationService applicationService = new AbstractDeviceApplicationService.SimpleDeviceApplicationService(
                deviceEventStore,
                deviceStateRepository,
                deviceStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public TagDeviceAssociationStateRepository tagDeviceAssociationStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagDeviceAssociationStateRepository repository = new HibernateTagDeviceAssociationStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public TagDeviceAssociationStateQueryRepository tagDeviceAssociationStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagDeviceAssociationStateQueryRepository repository = new HibernateTagDeviceAssociationStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateTagDeviceAssociationEventStore tagDeviceAssociationEventStore(SessionFactory hibernateSessionFactory) {
        HibernateTagDeviceAssociationEventStore eventStore = new HibernateTagDeviceAssociationEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractTagDeviceAssociationApplicationService.SimpleTagDeviceAssociationApplicationService tagDeviceAssociationApplicationService(
            @Qualifier("tagDeviceAssociationEventStore") EventStore tagDeviceAssociationEventStore,
            TagDeviceAssociationStateRepository tagDeviceAssociationStateRepository,
            TagDeviceAssociationStateQueryRepository tagDeviceAssociationStateQueryRepository
    ) {
        AbstractTagDeviceAssociationApplicationService.SimpleTagDeviceAssociationApplicationService applicationService = new AbstractTagDeviceAssociationApplicationService.SimpleTagDeviceAssociationApplicationService(
                tagDeviceAssociationEventStore,
                tagDeviceAssociationStateRepository,
                tagDeviceAssociationStateQueryRepository
        );
        return applicationService;
    }


}
