// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.domain.cabinet;

import java.util.*;
import java.util.Date;
import org.dddml.clm.domain.*;
import org.dddml.clm.specialization.*;
import org.dddml.clm.domain.AbstractEvent;

public abstract class AbstractCabinetEvent extends AbstractEvent implements CabinetEvent.SqlCabinetEvent {
    private CabinetEventId cabinetEventId = new CabinetEventId();

    public CabinetEventId getCabinetEventId() {
        return this.cabinetEventId;
    }

    public void setCabinetEventId(CabinetEventId eventId) {
        this.cabinetEventId = eventId;
    }
    
    public String getCabinetId() {
        return getCabinetEventId().getCabinetId();
    }

    public void setCabinetId(String cabinetId) {
        getCabinetEventId().setCabinetId(cabinetId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getCabinetEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getCabinetEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    protected AbstractCabinetEvent() {
    }

    protected AbstractCabinetEvent(CabinetEventId eventId) {
        this.cabinetEventId = eventId;
    }


    public abstract String getEventType();


    public static abstract class AbstractCabinetStateEvent extends AbstractCabinetEvent implements CabinetEvent.CabinetStateEvent {
        private String description;

        public String getDescription()
        {
            return this.description;
        }

        public void setDescription(String description)
        {
            this.description = description;
        }

        private Boolean active;

        public Boolean getActive()
        {
            return this.active;
        }

        public void setActive(Boolean active)
        {
            this.active = active;
        }

        protected AbstractCabinetStateEvent(CabinetEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractCabinetStateCreated extends AbstractCabinetStateEvent implements CabinetEvent.CabinetStateCreated
    {
        public AbstractCabinetStateCreated() {
            this(new CabinetEventId());
        }

        public AbstractCabinetStateCreated(CabinetEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

    }


    public static abstract class AbstractCabinetStateMergePatched extends AbstractCabinetStateEvent implements CabinetEvent.CabinetStateMergePatched
    {
        public AbstractCabinetStateMergePatched() {
            this(new CabinetEventId());
        }

        public AbstractCabinetStateMergePatched(CabinetEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved() {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed) {
            this.isPropertyDescriptionRemoved = removed;
        }

        private Boolean isPropertyActiveRemoved;

        public Boolean getIsPropertyActiveRemoved() {
            return this.isPropertyActiveRemoved;
        }

        public void setIsPropertyActiveRemoved(Boolean removed) {
            this.isPropertyActiveRemoved = removed;
        }


    }


    public static abstract class AbstractCabinetStateDeleted extends AbstractCabinetStateEvent implements CabinetEvent.CabinetStateDeleted
    {
        public AbstractCabinetStateDeleted() {
            this(new CabinetEventId());
        }

        public AbstractCabinetStateDeleted(CabinetEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.DELETED;
        }

    }

    public static class SimpleCabinetStateCreated extends AbstractCabinetStateCreated
    {
        public SimpleCabinetStateCreated() {
        }

        public SimpleCabinetStateCreated(CabinetEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleCabinetStateMergePatched extends AbstractCabinetStateMergePatched
    {
        public SimpleCabinetStateMergePatched() {
        }

        public SimpleCabinetStateMergePatched(CabinetEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleCabinetStateDeleted extends AbstractCabinetStateDeleted
    {
        public SimpleCabinetStateDeleted() {
        }

        public SimpleCabinetStateDeleted(CabinetEventId eventId) {
            super(eventId);
        }
    }

}

