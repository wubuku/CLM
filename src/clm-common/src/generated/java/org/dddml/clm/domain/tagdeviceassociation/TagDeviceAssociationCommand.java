// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.domain.tagdeviceassociation;

import java.util.*;
import org.dddml.clm.domain.*;
import java.time.OffsetDateTime;
import org.dddml.clm.domain.Command;
import org.dddml.clm.specialization.DomainError;

public interface TagDeviceAssociationCommand extends Command {

    TagDeviceAssociationId getTagDeviceAssociationId();

    void setTagDeviceAssociationId(TagDeviceAssociationId tagDeviceAssociationId);

    Long getVersion();

    void setVersion(Long version);

    static void throwOnInvalidStateTransition(TagDeviceAssociationState state, Command c) {
        if (state.getVersion() == null) {
            if (isCommandCreate((TagDeviceAssociationCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCommandCreate((TagDeviceAssociationCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCommandCreate(TagDeviceAssociationCommand c) {
        if ((c instanceof TagDeviceAssociationCommand.CreateTagDeviceAssociation) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getVersion().equals(TagDeviceAssociationState.VERSION_NULL)))
            return true;
        if ((c instanceof TagDeviceAssociationCommand.MergePatchTagDeviceAssociation))
            return false;
        if ((c instanceof TagDeviceAssociationCommand.DeleteTagDeviceAssociation))
            return false;
        if (c.getVersion().equals(TagDeviceAssociationState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchTagDeviceAssociation extends TagDeviceAssociationCommand
    {

        Boolean getActive();

        void setActive(Boolean active);

    }

    interface CreateTagDeviceAssociation extends CreateOrMergePatchTagDeviceAssociation
    {
    }

    interface MergePatchTagDeviceAssociation extends CreateOrMergePatchTagDeviceAssociation
    {
        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


    }

    interface DeleteTagDeviceAssociation extends TagDeviceAssociationCommand
    {
    }

}

