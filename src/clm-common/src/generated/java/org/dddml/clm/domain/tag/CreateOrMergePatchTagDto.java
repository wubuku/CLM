// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.domain.tag;

import java.util.Date;
import org.dddml.clm.domain.*;

public class CreateOrMergePatchTagDto extends AbstractTagCommandDto implements TagCommand.CreateOrMergePatchTag {

    /**
     * Status
     */
    private Integer status;

    public Integer getStatus()
    {
        return this.status;
    }

    public void setStatus(Integer status)
    {
        this.status = status;
    }

    /**
     * Active
     */
    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }


    private Boolean isPropertyStatusRemoved;

    public Boolean getIsPropertyStatusRemoved()
    {
        return this.isPropertyStatusRemoved;
    }

    public void setIsPropertyStatusRemoved(Boolean removed)
    {
        this.isPropertyStatusRemoved = removed;
    }

    private Boolean isPropertyActiveRemoved;

    public Boolean getIsPropertyActiveRemoved()
    {
        return this.isPropertyActiveRemoved;
    }

    public void setIsPropertyActiveRemoved(Boolean removed)
    {
        this.isPropertyActiveRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchTag command)
    {
        ((AbstractTagCommandDto) this).copyTo(command);
        command.setStatus(this.getStatus());
        command.setActive(this.getActive());
    }

    public TagCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractTagCommand.SimpleCreateTag command = new AbstractTagCommand.SimpleCreateTag();
            copyTo((AbstractTagCommand.AbstractCreateTag) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractTagCommand.SimpleMergePatchTag command = new AbstractTagCommand.SimpleMergePatchTag();
            copyTo((AbstractTagCommand.SimpleMergePatchTag) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public TagCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateTagDto command = new CreateTagDto();
            copyTo((CreateTag) command);
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchTagDto command = new MergePatchTagDto();
            copyTo((MergePatchTag) command);
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateTag command)
    {
        copyTo((CreateOrMergePatchTag) command);
    }

    public void copyTo(MergePatchTag command)
    {
        copyTo((CreateOrMergePatchTag) command);
        command.setIsPropertyStatusRemoved(this.getIsPropertyStatusRemoved());
        command.setIsPropertyActiveRemoved(this.getIsPropertyActiveRemoved());
    }

    public static class CreateTagDto extends CreateOrMergePatchTagDto implements TagCommand.CreateTag
    {
        public CreateTagDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public TagCommand.CreateTag toCreateTag()
        {
            return (TagCommand.CreateTag) toCommand();
        }

    }

    public static class MergePatchTagDto extends CreateOrMergePatchTagDto implements TagCommand.MergePatchTag
    {
        public MergePatchTagDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public TagCommand.MergePatchTag toMergePatchTag()
        {
            return (TagCommand.MergePatchTag) toCommand();
        }

    }

}

