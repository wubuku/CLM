// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.domain.device;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.clm.domain.*;
import org.dddml.clm.specialization.*;

public abstract class AbstractDeviceAggregate extends AbstractAggregate implements DeviceAggregate {
    private DeviceState.MutableDeviceState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractDeviceAggregate(DeviceState state) {
        this.state = (DeviceState.MutableDeviceState)state;
    }

    public DeviceState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(DeviceCommand.CreateDevice c) {
        if (c.getVersion() == null) { c.setVersion(DeviceState.VERSION_NULL); }
        DeviceEvent e = map(c);
        apply(e);
    }

    public void mergePatch(DeviceCommand.MergePatchDevice c) {
        DeviceEvent e = map(c);
        apply(e);
    }

    public void delete(DeviceCommand.DeleteDevice c) {
        DeviceEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        DeviceCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected DeviceEvent map(DeviceCommand.CreateDevice c) {
        DeviceEventId stateEventId = new DeviceEventId(c.getDeviceId(), c.getVersion());
        DeviceEvent.DeviceStateCreated e = newDeviceStateCreated(stateEventId);
        e.setCabinetId(c.getCabinetId());
        e.setDescription(c.getDescription());
        e.setActive(c.getActive());
        ((AbstractDeviceEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DeviceEvent map(DeviceCommand.MergePatchDevice c) {
        DeviceEventId stateEventId = new DeviceEventId(c.getDeviceId(), c.getVersion());
        DeviceEvent.DeviceStateMergePatched e = newDeviceStateMergePatched(stateEventId);
        e.setCabinetId(c.getCabinetId());
        e.setDescription(c.getDescription());
        e.setActive(c.getActive());
        e.setIsPropertyCabinetIdRemoved(c.getIsPropertyCabinetIdRemoved());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyActiveRemoved(c.getIsPropertyActiveRemoved());
        ((AbstractDeviceEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DeviceEvent map(DeviceCommand.DeleteDevice c) {
        DeviceEventId stateEventId = new DeviceEventId(c.getDeviceId(), c.getVersion());
        DeviceEvent.DeviceStateDeleted e = newDeviceStateDeleted(stateEventId);
        ((AbstractDeviceEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    ////////////////////////

    protected DeviceEvent.DeviceStateCreated newDeviceStateCreated(Long version, String commandId, String requesterId) {
        DeviceEventId stateEventId = new DeviceEventId(this.state.getDeviceId(), version);
        DeviceEvent.DeviceStateCreated e = newDeviceStateCreated(stateEventId);
        ((AbstractDeviceEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DeviceEvent.DeviceStateMergePatched newDeviceStateMergePatched(Long version, String commandId, String requesterId) {
        DeviceEventId stateEventId = new DeviceEventId(this.state.getDeviceId(), version);
        DeviceEvent.DeviceStateMergePatched e = newDeviceStateMergePatched(stateEventId);
        ((AbstractDeviceEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DeviceEvent.DeviceStateDeleted newDeviceStateDeleted(Long version, String commandId, String requesterId) {
        DeviceEventId stateEventId = new DeviceEventId(this.state.getDeviceId(), version);
        DeviceEvent.DeviceStateDeleted e = newDeviceStateDeleted(stateEventId);
        ((AbstractDeviceEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected DeviceEvent.DeviceStateCreated newDeviceStateCreated(DeviceEventId stateEventId) {
        return new AbstractDeviceEvent.SimpleDeviceStateCreated(stateEventId);
    }

    protected DeviceEvent.DeviceStateMergePatched newDeviceStateMergePatched(DeviceEventId stateEventId) {
        return new AbstractDeviceEvent.SimpleDeviceStateMergePatched(stateEventId);
    }

    protected DeviceEvent.DeviceStateDeleted newDeviceStateDeleted(DeviceEventId stateEventId) {
        return new AbstractDeviceEvent.SimpleDeviceStateDeleted(stateEventId);
    }


    public static class SimpleDeviceAggregate extends AbstractDeviceAggregate {
        public SimpleDeviceAggregate(DeviceState state) {
            super(state);
        }

    }

}

