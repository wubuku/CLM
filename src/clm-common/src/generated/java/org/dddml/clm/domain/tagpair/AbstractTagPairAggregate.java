// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.domain.tagpair;

import java.util.*;
import org.dddml.clm.domain.*;
import java.util.Date;
import org.dddml.clm.specialization.*;

public abstract class AbstractTagPairAggregate extends AbstractAggregate implements TagPairAggregate {
    private TagPairState.MutableTagPairState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractTagPairAggregate(TagPairState state) {
        this.state = (TagPairState.MutableTagPairState)state;
    }

    public TagPairState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(TagPairCommand.CreateTagPair c) {
        if (c.getVersion() == null) { c.setVersion(TagPairState.VERSION_NULL); }
        TagPairEvent e = map(c);
        apply(e);
    }

    public void mergePatch(TagPairCommand.MergePatchTagPair c) {
        TagPairEvent e = map(c);
        apply(e);
    }

    public void delete(TagPairCommand.DeleteTagPair c) {
        TagPairEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        TagPairCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected TagPairEvent map(TagPairCommand.CreateTagPair c) {
        TagPairEventId stateEventId = new TagPairEventId(c.getTagPairId(), c.getVersion());
        TagPairEvent.TagPairStateCreated e = newTagPairStateCreated(stateEventId);
        e.setDescription(c.getDescription());
        e.setActive(c.getActive());
        ((AbstractTagPairEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagPairEvent map(TagPairCommand.MergePatchTagPair c) {
        TagPairEventId stateEventId = new TagPairEventId(c.getTagPairId(), c.getVersion());
        TagPairEvent.TagPairStateMergePatched e = newTagPairStateMergePatched(stateEventId);
        e.setDescription(c.getDescription());
        e.setActive(c.getActive());
        e.setIsPropertyDescriptionRemoved(c.getIsPropertyDescriptionRemoved());
        e.setIsPropertyActiveRemoved(c.getIsPropertyActiveRemoved());
        ((AbstractTagPairEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagPairEvent map(TagPairCommand.DeleteTagPair c) {
        TagPairEventId stateEventId = new TagPairEventId(c.getTagPairId(), c.getVersion());
        TagPairEvent.TagPairStateDeleted e = newTagPairStateDeleted(stateEventId);
        ((AbstractTagPairEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }


    ////////////////////////

    protected TagPairEvent.TagPairStateCreated newTagPairStateCreated(Long version, String commandId, String requesterId) {
        TagPairEventId stateEventId = new TagPairEventId(this.state.getTagPairId(), version);
        TagPairEvent.TagPairStateCreated e = newTagPairStateCreated(stateEventId);
        ((AbstractTagPairEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagPairEvent.TagPairStateMergePatched newTagPairStateMergePatched(Long version, String commandId, String requesterId) {
        TagPairEventId stateEventId = new TagPairEventId(this.state.getTagPairId(), version);
        TagPairEvent.TagPairStateMergePatched e = newTagPairStateMergePatched(stateEventId);
        ((AbstractTagPairEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagPairEvent.TagPairStateDeleted newTagPairStateDeleted(Long version, String commandId, String requesterId) {
        TagPairEventId stateEventId = new TagPairEventId(this.state.getTagPairId(), version);
        TagPairEvent.TagPairStateDeleted e = newTagPairStateDeleted(stateEventId);
        ((AbstractTagPairEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagPairEvent.TagPairStateCreated newTagPairStateCreated(TagPairEventId stateEventId) {
        return new AbstractTagPairEvent.SimpleTagPairStateCreated(stateEventId);
    }

    protected TagPairEvent.TagPairStateMergePatched newTagPairStateMergePatched(TagPairEventId stateEventId) {
        return new AbstractTagPairEvent.SimpleTagPairStateMergePatched(stateEventId);
    }

    protected TagPairEvent.TagPairStateDeleted newTagPairStateDeleted(TagPairEventId stateEventId) {
        return new AbstractTagPairEvent.SimpleTagPairStateDeleted(stateEventId);
    }


    public static class SimpleTagPairAggregate extends AbstractTagPairAggregate {
        public SimpleTagPairAggregate(TagPairState state) {
            super(state);
        }

    }

}

