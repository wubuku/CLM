// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.domain.tag;

import java.util.*;
import java.util.Date;
import org.dddml.clm.domain.*;
import org.dddml.clm.specialization.*;

public abstract class AbstractTagAggregate extends AbstractAggregate implements TagAggregate {
    private TagState.MutableTagState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractTagAggregate(TagState state) {
        this.state = (TagState.MutableTagState)state;
    }

    public TagState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(TagCommand.CreateTag c) {
        if (c.getVersion() == null) { c.setVersion(TagState.VERSION_NULL); }
        TagEvent e = map(c);
        apply(e);
    }

    public void mergePatch(TagCommand.MergePatchTag c) {
        TagEvent e = map(c);
        apply(e);
    }

    public void delete(TagCommand.DeleteTag c) {
        TagEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        TagCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected TagEvent map(TagCommand.CreateTag c) {
        TagEventId stateEventId = new TagEventId(c.getTagId(), c.getVersion());
        TagEvent.TagStateCreated e = newTagStateCreated(stateEventId);
        e.setStatus(c.getStatus());
        e.setActive(c.getActive());
        ((AbstractTagEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagEvent map(TagCommand.MergePatchTag c) {
        TagEventId stateEventId = new TagEventId(c.getTagId(), c.getVersion());
        TagEvent.TagStateMergePatched e = newTagStateMergePatched(stateEventId);
        e.setStatus(c.getStatus());
        e.setActive(c.getActive());
        e.setIsPropertyStatusRemoved(c.getIsPropertyStatusRemoved());
        e.setIsPropertyActiveRemoved(c.getIsPropertyActiveRemoved());
        ((AbstractTagEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagEvent map(TagCommand.DeleteTag c) {
        TagEventId stateEventId = new TagEventId(c.getTagId(), c.getVersion());
        TagEvent.TagStateDeleted e = newTagStateDeleted(stateEventId);
        ((AbstractTagEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }


    ////////////////////////

    protected TagEvent.TagStateCreated newTagStateCreated(Long version, String commandId, String requesterId) {
        TagEventId stateEventId = new TagEventId(this.state.getTagId(), version);
        TagEvent.TagStateCreated e = newTagStateCreated(stateEventId);
        ((AbstractTagEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagEvent.TagStateMergePatched newTagStateMergePatched(Long version, String commandId, String requesterId) {
        TagEventId stateEventId = new TagEventId(this.state.getTagId(), version);
        TagEvent.TagStateMergePatched e = newTagStateMergePatched(stateEventId);
        ((AbstractTagEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagEvent.TagStateDeleted newTagStateDeleted(Long version, String commandId, String requesterId) {
        TagEventId stateEventId = new TagEventId(this.state.getTagId(), version);
        TagEvent.TagStateDeleted e = newTagStateDeleted(stateEventId);
        ((AbstractTagEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));
        return e;
    }

    protected TagEvent.TagStateCreated newTagStateCreated(TagEventId stateEventId) {
        return new AbstractTagEvent.SimpleTagStateCreated(stateEventId);
    }

    protected TagEvent.TagStateMergePatched newTagStateMergePatched(TagEventId stateEventId) {
        return new AbstractTagEvent.SimpleTagStateMergePatched(stateEventId);
    }

    protected TagEvent.TagStateDeleted newTagStateDeleted(TagEventId stateEventId) {
        return new AbstractTagEvent.SimpleTagStateDeleted(stateEventId);
    }


    public static class SimpleTagAggregate extends AbstractTagAggregate {
        public SimpleTagAggregate(TagState state) {
            super(state);
        }

    }

}

