// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.domain.tagpair;

import java.util.*;
import org.dddml.clm.domain.*;
import java.util.Date;
import org.dddml.clm.specialization.*;
import org.dddml.clm.domain.AbstractEvent;

public abstract class AbstractTagPairEvent extends AbstractEvent implements TagPairEvent.SqlTagPairEvent {
    private TagPairEventId tagPairEventId = new TagPairEventId();

    public TagPairEventId getTagPairEventId() {
        return this.tagPairEventId;
    }

    public void setTagPairEventId(TagPairEventId eventId) {
        this.tagPairEventId = eventId;
    }
    
    public TagIdPair getTagPairId() {
        return getTagPairEventId().getTagPairId();
    }

    public void setTagPairId(TagIdPair tagPairId) {
        getTagPairEventId().setTagPairId(tagPairId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getTagPairEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getTagPairEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    protected AbstractTagPairEvent() {
    }

    protected AbstractTagPairEvent(TagPairEventId eventId) {
        this.tagPairEventId = eventId;
    }


    public abstract String getEventType();


    public static abstract class AbstractTagPairStateEvent extends AbstractTagPairEvent implements TagPairEvent.TagPairStateEvent {
        private String description;

        public String getDescription()
        {
            return this.description;
        }

        public void setDescription(String description)
        {
            this.description = description;
        }

        private Boolean active;

        public Boolean getActive()
        {
            return this.active;
        }

        public void setActive(Boolean active)
        {
            this.active = active;
        }

        protected AbstractTagPairStateEvent(TagPairEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractTagPairStateCreated extends AbstractTagPairStateEvent implements TagPairEvent.TagPairStateCreated
    {
        public AbstractTagPairStateCreated() {
            this(new TagPairEventId());
        }

        public AbstractTagPairStateCreated(TagPairEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

    }


    public static abstract class AbstractTagPairStateMergePatched extends AbstractTagPairStateEvent implements TagPairEvent.TagPairStateMergePatched
    {
        public AbstractTagPairStateMergePatched() {
            this(new TagPairEventId());
        }

        public AbstractTagPairStateMergePatched(TagPairEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyDescriptionRemoved;

        public Boolean getIsPropertyDescriptionRemoved() {
            return this.isPropertyDescriptionRemoved;
        }

        public void setIsPropertyDescriptionRemoved(Boolean removed) {
            this.isPropertyDescriptionRemoved = removed;
        }

        private Boolean isPropertyActiveRemoved;

        public Boolean getIsPropertyActiveRemoved() {
            return this.isPropertyActiveRemoved;
        }

        public void setIsPropertyActiveRemoved(Boolean removed) {
            this.isPropertyActiveRemoved = removed;
        }


    }


    public static abstract class AbstractTagPairStateDeleted extends AbstractTagPairStateEvent implements TagPairEvent.TagPairStateDeleted
    {
        public AbstractTagPairStateDeleted() {
            this(new TagPairEventId());
        }

        public AbstractTagPairStateDeleted(TagPairEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.DELETED;
        }

    }

    public static class SimpleTagPairStateCreated extends AbstractTagPairStateCreated
    {
        public SimpleTagPairStateCreated() {
        }

        public SimpleTagPairStateCreated(TagPairEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleTagPairStateMergePatched extends AbstractTagPairStateMergePatched
    {
        public SimpleTagPairStateMergePatched() {
        }

        public SimpleTagPairStateMergePatched(TagPairEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleTagPairStateDeleted extends AbstractTagPairStateDeleted
    {
        public SimpleTagPairStateDeleted() {
        }

        public SimpleTagPairStateDeleted(TagPairEventId eventId) {
            super(eventId);
        }
    }

}

