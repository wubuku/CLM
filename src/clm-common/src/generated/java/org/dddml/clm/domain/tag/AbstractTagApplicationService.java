// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.domain.tag;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.util.Date;
import org.dddml.clm.domain.*;
import org.dddml.clm.specialization.*;

public abstract class AbstractTagApplicationService implements TagApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private TagStateRepository stateRepository;

    protected TagStateRepository getStateRepository() {
        return stateRepository;
    }

    private TagStateQueryRepository stateQueryRepository;

    private IdGenerator<String, TagCommand.CreateTag, TagState> tagIdGenerator;

    protected IdGenerator<String, TagCommand.CreateTag, TagState> getIdGenerator() {
        return tagIdGenerator;
    }
    protected TagStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<TagAggregate, TagState> aggregateEventListener;

    public AggregateEventListener<TagAggregate, TagState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<TagAggregate, TagState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractTagApplicationService(EventStore eventStore, TagStateRepository stateRepository, TagStateQueryRepository stateQueryRepository, IdGenerator<String, TagCommand.CreateTag, TagState> idGenerator) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
        this.tagIdGenerator = idGenerator;
    }

    public String createWithoutId(TagCommand.CreateTag c) {
        String idObj = getIdGenerator().generateId(c);
        TagState state = getStateRepository().get(idObj, true);
        if (state != null) {
            if (getIdGenerator().isArbitraryIdEnabled()) {
                idObj = getIdGenerator().getNextId();
            } else {
                throw DomainError.named("instanceExist", "the instance already exist, Id: %1$s , aggregate name: %2$s ", idObj, "Tag");
            }
        }
        c.setTagId(idObj);
        when(c);
        return idObj;
   
    }

    public void when(TagCommand.CreateTag c) {
        update(c, ar -> ar.create(c));
    }

    public void when(TagCommand.MergePatchTag c) {
        update(c, ar -> ar.mergePatch(c));
    }

    public void when(TagCommand.DeleteTag c) {
        update(c, ar -> ar.delete(c));
    }

    public TagState get(String id) {
        TagState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<TagState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<TagState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<TagState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<TagState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public TagEvent getEvent(String tagId, long version) {
        TagEvent e = (TagEvent)getEventStore().getEvent(toEventStoreAggregateId(tagId), version);
        if (e != null) {
            ((TagEvent.SqlTagEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(tagId, 0);
        }
        return e;
    }

    public TagState getHistoryState(String tagId, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractTagEvent.class, toEventStoreAggregateId(tagId), version - 1);
        return new AbstractTagState.SimpleTagState(eventStream.getEvents());
    }


    public TagAggregate getTagAggregate(TagState state) {
        return new AbstractTagAggregate.SimpleTagAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(TagCommand c, Consumer<TagAggregate> action) {
        String aggregateId = c.getTagId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        TagState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        TagAggregate aggregate = getTagAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getVersion() == null ? TagState.VERSION_NULL : c.getVersion(), aggregate, state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, TagAggregate aggregate, TagState state) {
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    public void initialize(TagEvent.TagStateCreated stateCreated) {
        String aggregateId = ((TagEvent.SqlTagEvent)stateCreated).getTagEventId().getTagId();
        TagState.SqlTagState state = new AbstractTagState.SimpleTagState();
        state.setTagId(aggregateId);

        TagAggregate aggregate = getTagAggregate(state);
        ((AbstractTagAggregate) aggregate).apply(stateCreated);

        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        persist(eventStoreAggregateId, ((TagEvent.SqlTagEvent)stateCreated).getTagEventId().getVersion(), aggregate, state);
    }

    protected boolean isDuplicateCommand(TagCommand command, EventStoreAggregateId eventStoreAggregateId, TagState state) {
        boolean duplicate = false;
        if (command.getVersion() == null) { command.setVersion(TagState.VERSION_NULL); }
        if (state.getVersion() != null && state.getVersion() > command.getVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractTagEvent.class, eventStoreAggregateId, command.getVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimpleTagApplicationService extends AbstractTagApplicationService {
        public SimpleTagApplicationService(EventStore eventStore, TagStateRepository stateRepository, TagStateQueryRepository stateQueryRepository, IdGenerator<String, TagCommand.CreateTag, TagState> idGenerator)
        {
            super(eventStore, stateRepository, stateQueryRepository, idGenerator);
        }
    }

}

