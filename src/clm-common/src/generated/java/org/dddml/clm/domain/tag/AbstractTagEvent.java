// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.clm.domain.tag;

import java.util.*;
import java.time.OffsetDateTime;
import org.dddml.clm.domain.*;
import org.dddml.clm.specialization.*;
import org.dddml.clm.domain.AbstractEvent;

public abstract class AbstractTagEvent extends AbstractEvent implements TagEvent.SqlTagEvent {
    private TagEventId tagEventId = new TagEventId();

    public TagEventId getTagEventId() {
        return this.tagEventId;
    }

    public void setTagEventId(TagEventId eventId) {
        this.tagEventId = eventId;
    }
    
    public String getTagId() {
        return getTagEventId().getTagId();
    }

    public void setTagId(String tagId) {
        getTagEventId().setTagId(tagId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public Long getVersion() {
        return getTagEventId().getVersion();
    }
    
    public void setVersion(Long version) {
        getTagEventId().setVersion(version);
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractTagEvent() {
    }

    protected AbstractTagEvent(TagEventId eventId) {
        this.tagEventId = eventId;
    }


    public abstract String getEventType();

    public static class TagLobEvent extends AbstractTagEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventType() {
            return "TagLobEvent";
        }

    }


    public static abstract class AbstractTagStateEvent extends AbstractTagEvent implements TagEvent.TagStateEvent {
        private Integer status;

        public Integer getStatus()
        {
            return this.status;
        }

        public void setStatus(Integer status)
        {
            this.status = status;
        }

        private Boolean active;

        public Boolean getActive()
        {
            return this.active;
        }

        public void setActive(Boolean active)
        {
            this.active = active;
        }

        protected AbstractTagStateEvent(TagEventId eventId) {
            super(eventId);
        }
    }

    public static abstract class AbstractTagStateCreated extends AbstractTagStateEvent implements TagEvent.TagStateCreated
    {
        public AbstractTagStateCreated() {
            this(new TagEventId());
        }

        public AbstractTagStateCreated(TagEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.CREATED;
        }

    }


    public static abstract class AbstractTagStateMergePatched extends AbstractTagStateEvent implements TagEvent.TagStateMergePatched
    {
        public AbstractTagStateMergePatched() {
            this(new TagEventId());
        }

        public AbstractTagStateMergePatched(TagEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.MERGE_PATCHED;
        }

        private Boolean isPropertyStatusRemoved;

        public Boolean getIsPropertyStatusRemoved() {
            return this.isPropertyStatusRemoved;
        }

        public void setIsPropertyStatusRemoved(Boolean removed) {
            this.isPropertyStatusRemoved = removed;
        }

        private Boolean isPropertyActiveRemoved;

        public Boolean getIsPropertyActiveRemoved() {
            return this.isPropertyActiveRemoved;
        }

        public void setIsPropertyActiveRemoved(Boolean removed) {
            this.isPropertyActiveRemoved = removed;
        }


    }


    public static abstract class AbstractTagStateDeleted extends AbstractTagStateEvent implements TagEvent.TagStateDeleted
    {
        public AbstractTagStateDeleted() {
            this(new TagEventId());
        }

        public AbstractTagStateDeleted(TagEventId eventId) {
            super(eventId);
        }

        public String getEventType() {
            return StateEventType.DELETED;
        }

    }

    public static class SimpleTagStateCreated extends AbstractTagStateCreated
    {
        public SimpleTagStateCreated() {
        }

        public SimpleTagStateCreated(TagEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleTagStateMergePatched extends AbstractTagStateMergePatched
    {
        public SimpleTagStateMergePatched() {
        }

        public SimpleTagStateMergePatched(TagEventId eventId) {
            super(eventId);
        }
    }

    public static class SimpleTagStateDeleted extends AbstractTagStateDeleted
    {
        public SimpleTagStateDeleted() {
        }

        public SimpleTagStateDeleted(TagEventId eventId) {
            super(eventId);
        }
    }

}

